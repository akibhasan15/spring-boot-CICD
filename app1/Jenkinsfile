pipeline {
    agent any

    tools {
        // Install the Maven version configured as "Maven3" and JDK17.
        maven "Maven3"
        jdk "JDK17"
    }

   stages {
      stage('Test') {
            steps {
             
               sh "cd ./app1 && mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
               // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

        }


         stage('Build-and-Push') {
        environment{
                   tag = sh(script: 'git describe --abbrev=0', returnStdout: true).trim()
               }
    steps{
     script{

        withDockerRegistry([ credentialsId: "dockerhub", url: "" ]) {
        docker.build("akib123/spring-boot:${tag}","-f ./app1/Dockerfile ./app1/").push() 

                                                                      }
            }
          }
    }  
 stage('Deploy-to-Test') {
         when {
         
             expression{env.GIT_BRANCH=="origin/test"}
         }
            steps{
               sshagent(credentials: ['k8sCluster-test']) {
               withCredentials([string(credentialsId: 'USER-KubeServer-test', variable: 'userAtIP')]) {

                 sh 'scp ./deploy/app1.yaml ./deploy/service.yaml   ${userAtIP}: '
                sh 'ssh ${userAtIP} "kubectl  apply -f  app1.yaml"'
                sh 'ssh ${userAtIP} "kubectl  apply -f service.yaml"'
                sh 'ssh ${userAtIP} "rm ./app1.yaml ./service.yaml"'
                
}
    }
            }
    } 
 stage('Deploy-to-Production') {
         when {
            expression{env.GIT_BRANCH=="origin/main"}
         }
            steps{
               sshagent(credentials: ['k8sCluster']) {
               withCredentials([string(credentialsId: 'USER-KubeServer', variable: 'userAtIP')]) {

                sh 'scp ./deploy/app1.yaml ./deploy/service.yaml   ${userAtIP}: '
                sh 'ssh ${userAtIP} "kubectl  apply -f  app1.yaml"'
                sh 'ssh ${userAtIP} "kubectl apply -f service.yaml"'
                sh 'ssh ${userAtIP} "rm ./app1.yaml ./service.yaml"'
                
}
    }
            }
    } 
   }
}
